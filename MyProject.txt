=== main.tf ===
# Provider configuration
provider "aws" {
  region = var.aws_region
}

# Security Group Module
module "security_group" {
  source = "./security_groups_module"
  
  for_each = var.SecurityGroups

  sg_name        = each.value.name
  sg_description = "Security group for ${each.value.name}"
  vpc_id         = each.value.vpcid
  
  ingress_rules = each.value.ingress_rules
  egress_rules  = each.value.egress_rules
}

# EC2 Instances Module
module "ec2_instances" {
  source = "./instance_module"

  for_each = var.ec2_config

  ami_id            = each.value.ami_id
  instance_type     = each.value.instance_type
  availability_zone = each.value.availability_zone
  instance_name     = each.value.name
  environment       = each.value.environment
}

=== variables.tf ===
variable "aws_region" {
  description = "The AWS region to deploy resources in"
  type        = string
  default     = "us-east-1"
}

###########################                         
#   variables for Ec2     #
###########################

variable "ec2_config" {
  description = "Configuration for EC2 instances"
  type = map(object({
    ami_id             = string
    instance_type      = string
    availability_zone  = string
    name               = string
    environment        = string
  }))
}

###########################                         
#   variables for SG      #
###########################
variable "vpc_id" {
  description = "The ID of the VPC where the security group will be created"
  type        = string
}

variable "SecurityGroups" {
  description = "Configuration for security groups, including ingress and egress rules"
  type = map(object({
    name          = string
    vpcid         = string
    ingress_rules = map(object({
      cidr_ipv4 = list(string)
      from_port  = number
      to_port    = number
      protocol   = string
    }))
    egress_rules = map(object({
      cidr_ipv4 = list(string)
      from_port  = number
      to_port    = number
      protocol   = string
    }))
  }))
}

=== terraform.tfvars ===
ec2_config = {
  vm1 = {
    ami_id                  = "ami-0ae8f15ae66fe8cda"
    instance_type           = "t2.micro"
    availability_zone       = "us-east-1a"
    name                    = "DevInstance1"
    environment             = "Dev"
  }
  vm2 = {
    ami_id                  = "ami-0ae8f15ae66fe8cda"
    instance_type           = "t2.medium"
    availability_zone       = "us-east-1b"
    name                    = "ProdInstance2"
    environment             = "Prod"
  }
  vm3 = {
    ami_id                  = "ami-0ae8f15ae66fe8cda"
    instance_type           = "t2.medium"
    availability_zone       = "us-east-1c"
    name                    = "TestInstance3"
    environment             = "Test"
  }
}

SecurityGroups = {
  sg1 = {
    name    = "allow_tls_ipv4"
    vpcid   = "vpc-06d79c0c474c37cd7"
    ingress_rules = {
      rule1 = {
        cidr_ipv4 = ["0.0.0.0/0"]
        from_port = 443
        to_port   = 443
        protocol  = "tcp"
      }
      rule2 = {
        cidr_ipv4 = ["0.0.0.0/0"]
        from_port = 80
        to_port   = 80
        protocol  = "tcp"
      }
    }
    egress_rules = {
      rule1 = {
        cidr_ipv4 = ["0.0.0.0/0"]
        from_port = 0
        to_port   = 0
        protocol  = "-1" # semantically equivalent all - Indicates protocol allowed for all traffic
      }
    }
  }
}

=== security_groups_module/main.tf ===
resource "aws_security_group" "this" {
  name        = var.sg_name
  description = var.sg_description
  vpc_id      = var.vpc_id

  dynamic "ingress" {
    for_each = var.ingress_rules
    content {
      cidr_blocks = ingress.value.cidr_ipv4
      from_port   = ingress.value.from_port
      to_port     = ingress.value.to_port
      protocol    = ingress.value.protocol
    }
  }

  dynamic "egress" {
    for_each = var.egress_rules
    content {
      cidr_blocks = egress.value.cidr_ipv4
      from_port   = egress.value.from_port
      to_port     = egress.value.to_port
      protocol    = egress.value.protocol
    }
  }

  tags = {
    Name = var.sg_name
  }
}

=== security_groups_module/variables.tf ===
variable "sg_name" {
  description = "The name of the security group"
  type        = string
}

variable "sg_description" {
  description = "The description of the security group"
  type        = string
}

variable "vpc_id" {
  description = "The ID of the VPC where the security group will be created"
  type        = string
}

variable "ingress_rules" {
  description = "Map of ingress rules to create"
  type        = map(object({
    cidr_ipv4 = list(string)
    from_port = number
    to_port   = number
    protocol  = string
  }))
}

variable "egress_rules" {
  description = "Map of egress rules to create"
  type        = map(object({
    cidr_ipv4 = list(string)
    from_port = number
    to_port   = number
    protocol  = string
  }))
}

=== instance_module/main.tf ===
resource "aws_instance" "this" {
  ami             = var.ami_id
  instance_type   = var.instance_type
  availability_zone = var.availability_zone

  tags = {
    Name        = var.instance_name
    Environment = var.environment
  }
}

output "instance_id" {
  value = aws_instance.this.id
}

=== instance_module/variables.tf ===
variable "ami_id" {
  description = "The AMI ID to use for the EC2 instance"
  type        = string
}

variable "instance_type" {
  description = "The instance type to use for the EC2 instance"
  type        = string
}

variable "availability_zone" {
  description = "The availability zone to deploy the instance"
  type        = string
}

variable "instance_name" {
  description = "The name tag for the EC2 instance"
  type        = string
}

variable "environment" {
  description = "The environment tag for the EC2 instance"
  type        = string
  default     = "Test"
}

